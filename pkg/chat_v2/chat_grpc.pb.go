// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: chat.proto

package chat_v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatV2Client is the client API for ChatV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatV2Client interface {
	CreateSend(ctx context.Context, in *CreateSendRequest, opts ...grpc.CallOption) (*CreateSendResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Change(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chatV2Client struct {
	cc grpc.ClientConnInterface
}

func NewChatV2Client(cc grpc.ClientConnInterface) ChatV2Client {
	return &chatV2Client{cc}
}

func (c *chatV2Client) CreateSend(ctx context.Context, in *CreateSendRequest, opts ...grpc.CallOption) (*CreateSendResponse, error) {
	out := new(CreateSendResponse)
	err := c.cc.Invoke(ctx, "/chat_v2.ChatV2/CreateSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatV2Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/chat_v2.ChatV2/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatV2Client) Change(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat_v2.ChatV2/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatV2Client) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat_v2.ChatV2/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatV2Server is the server API for ChatV2 service.
// All implementations must embed UnimplementedChatV2Server
// for forward compatibility
type ChatV2Server interface {
	CreateSend(context.Context, *CreateSendRequest) (*CreateSendResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Change(context.Context, *ChangeRequest) (*empty.Empty, error)
	Delete(context.Context, *DeleteRequest) (*empty.Empty, error)
	mustEmbedUnimplementedChatV2Server()
}

// UnimplementedChatV2Server must be embedded to have forward compatible implementations.
type UnimplementedChatV2Server struct {
}

func (UnimplementedChatV2Server) CreateSend(context.Context, *CreateSendRequest) (*CreateSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSend not implemented")
}
func (UnimplementedChatV2Server) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChatV2Server) Change(context.Context, *ChangeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedChatV2Server) Delete(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatV2Server) mustEmbedUnimplementedChatV2Server() {}

// UnsafeChatV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatV2Server will
// result in compilation errors.
type UnsafeChatV2Server interface {
	mustEmbedUnimplementedChatV2Server()
}

func RegisterChatV2Server(s grpc.ServiceRegistrar, srv ChatV2Server) {
	s.RegisterService(&ChatV2_ServiceDesc, srv)
}

func _ChatV2_CreateSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatV2Server).CreateSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_v2.ChatV2/CreateSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatV2Server).CreateSend(ctx, req.(*CreateSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatV2_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatV2Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_v2.ChatV2/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatV2Server).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatV2_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatV2Server).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_v2.ChatV2/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatV2Server).Change(ctx, req.(*ChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatV2_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatV2Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat_v2.ChatV2/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatV2Server).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatV2_ServiceDesc is the grpc.ServiceDesc for ChatV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat_v2.ChatV2",
	HandlerType: (*ChatV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSend",
			Handler:    _ChatV2_CreateSend_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ChatV2_Get_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _ChatV2_Change_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChatV2_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
