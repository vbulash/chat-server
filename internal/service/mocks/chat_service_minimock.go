// Code generated by http://github.com/gojuno/minimock (v3.4.2). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/vbulash/chat-server/internal/service.ChatService -o chat_service_minimock.go -n ChatServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/vbulash/chat-server/internal/model"
)

// ChatServiceMock implements service.ChatService
type ChatServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcChange          func(ctx context.Context, id int64, info *model.ChatInfo) (err error)
	inspectFuncChange   func(ctx context.Context, id int64, info *model.ChatInfo)
	afterChangeCounter  uint64
	beforeChangeCounter uint64
	ChangeMock          mChatServiceMockChange

	funcCreateSend          func(ctx context.Context, info *model.ChatInfo) (i1 int64, err error)
	inspectFuncCreateSend   func(ctx context.Context, info *model.ChatInfo)
	afterCreateSendCounter  uint64
	beforeCreateSendCounter uint64
	CreateSendMock          mChatServiceMockCreateSend

	funcDelete          func(ctx context.Context, id int64) (err error)
	inspectFuncDelete   func(ctx context.Context, id int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mChatServiceMockDelete

	funcGet          func(ctx context.Context, id int64) (cp1 *model.Chat, err error)
	inspectFuncGet   func(ctx context.Context, id int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mChatServiceMockGet
}

// NewChatServiceMock returns a mock for service.ChatService
func NewChatServiceMock(t minimock.Tester) *ChatServiceMock {
	m := &ChatServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChangeMock = mChatServiceMockChange{mock: m}
	m.ChangeMock.callArgs = []*ChatServiceMockChangeParams{}

	m.CreateSendMock = mChatServiceMockCreateSend{mock: m}
	m.CreateSendMock.callArgs = []*ChatServiceMockCreateSendParams{}

	m.DeleteMock = mChatServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*ChatServiceMockDeleteParams{}

	m.GetMock = mChatServiceMockGet{mock: m}
	m.GetMock.callArgs = []*ChatServiceMockGetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatServiceMockChange struct {
	optional           bool
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockChangeExpectation
	expectations       []*ChatServiceMockChangeExpectation

	callArgs []*ChatServiceMockChangeParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatServiceMockChangeExpectation specifies expectation struct of the ChatService.Change
type ChatServiceMockChangeExpectation struct {
	mock      *ChatServiceMock
	params    *ChatServiceMockChangeParams
	paramPtrs *ChatServiceMockChangeParamPtrs
	results   *ChatServiceMockChangeResults
	Counter   uint64
}

// ChatServiceMockChangeParams contains parameters of the ChatService.Change
type ChatServiceMockChangeParams struct {
	ctx  context.Context
	id   int64
	info *model.ChatInfo
}

// ChatServiceMockChangeParamPtrs contains pointers to parameters of the ChatService.Change
type ChatServiceMockChangeParamPtrs struct {
	ctx  *context.Context
	id   *int64
	info **model.ChatInfo
}

// ChatServiceMockChangeResults contains results of the ChatService.Change
type ChatServiceMockChangeResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmChange *mChatServiceMockChange) Optional() *mChatServiceMockChange {
	mmChange.optional = true
	return mmChange
}

// Expect sets up expected params for ChatService.Change
func (mmChange *mChatServiceMockChange) Expect(ctx context.Context, id int64, info *model.ChatInfo) *mChatServiceMockChange {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &ChatServiceMockChangeExpectation{}
	}

	if mmChange.defaultExpectation.paramPtrs != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by ExpectParams functions")
	}

	mmChange.defaultExpectation.params = &ChatServiceMockChangeParams{ctx, id, info}
	for _, e := range mmChange.expectations {
		if minimock.Equal(e.params, mmChange.defaultExpectation.params) {
			mmChange.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChange.defaultExpectation.params)
		}
	}

	return mmChange
}

// ExpectCtxParam1 sets up expected param ctx for ChatService.Change
func (mmChange *mChatServiceMockChange) ExpectCtxParam1(ctx context.Context) *mChatServiceMockChange {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &ChatServiceMockChangeExpectation{}
	}

	if mmChange.defaultExpectation.params != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Expect")
	}

	if mmChange.defaultExpectation.paramPtrs == nil {
		mmChange.defaultExpectation.paramPtrs = &ChatServiceMockChangeParamPtrs{}
	}
	mmChange.defaultExpectation.paramPtrs.ctx = &ctx

	return mmChange
}

// ExpectIdParam2 sets up expected param id for ChatService.Change
func (mmChange *mChatServiceMockChange) ExpectIdParam2(id int64) *mChatServiceMockChange {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &ChatServiceMockChangeExpectation{}
	}

	if mmChange.defaultExpectation.params != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Expect")
	}

	if mmChange.defaultExpectation.paramPtrs == nil {
		mmChange.defaultExpectation.paramPtrs = &ChatServiceMockChangeParamPtrs{}
	}
	mmChange.defaultExpectation.paramPtrs.id = &id

	return mmChange
}

// ExpectInfoParam3 sets up expected param info for ChatService.Change
func (mmChange *mChatServiceMockChange) ExpectInfoParam3(info *model.ChatInfo) *mChatServiceMockChange {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &ChatServiceMockChangeExpectation{}
	}

	if mmChange.defaultExpectation.params != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Expect")
	}

	if mmChange.defaultExpectation.paramPtrs == nil {
		mmChange.defaultExpectation.paramPtrs = &ChatServiceMockChangeParamPtrs{}
	}
	mmChange.defaultExpectation.paramPtrs.info = &info

	return mmChange
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Change
func (mmChange *mChatServiceMockChange) Inspect(f func(ctx context.Context, id int64, info *model.ChatInfo)) *mChatServiceMockChange {
	if mmChange.mock.inspectFuncChange != nil {
		mmChange.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Change")
	}

	mmChange.mock.inspectFuncChange = f

	return mmChange
}

// Return sets up results that will be returned by ChatService.Change
func (mmChange *mChatServiceMockChange) Return(err error) *ChatServiceMock {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Set")
	}

	if mmChange.defaultExpectation == nil {
		mmChange.defaultExpectation = &ChatServiceMockChangeExpectation{mock: mmChange.mock}
	}
	mmChange.defaultExpectation.results = &ChatServiceMockChangeResults{err}
	return mmChange.mock
}

// Set uses given function f to mock the ChatService.Change method
func (mmChange *mChatServiceMockChange) Set(f func(ctx context.Context, id int64, info *model.ChatInfo) (err error)) *ChatServiceMock {
	if mmChange.defaultExpectation != nil {
		mmChange.mock.t.Fatalf("Default expectation is already set for the ChatService.Change method")
	}

	if len(mmChange.expectations) > 0 {
		mmChange.mock.t.Fatalf("Some expectations are already set for the ChatService.Change method")
	}

	mmChange.mock.funcChange = f
	return mmChange.mock
}

// When sets expectation for the ChatService.Change which will trigger the result defined by the following
// Then helper
func (mmChange *mChatServiceMockChange) When(ctx context.Context, id int64, info *model.ChatInfo) *ChatServiceMockChangeExpectation {
	if mmChange.mock.funcChange != nil {
		mmChange.mock.t.Fatalf("ChatServiceMock.Change mock is already set by Set")
	}

	expectation := &ChatServiceMockChangeExpectation{
		mock:   mmChange.mock,
		params: &ChatServiceMockChangeParams{ctx, id, info},
	}
	mmChange.expectations = append(mmChange.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Change return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockChangeExpectation) Then(err error) *ChatServiceMock {
	e.results = &ChatServiceMockChangeResults{err}
	return e.mock
}

// Times sets number of times ChatService.Change should be invoked
func (mmChange *mChatServiceMockChange) Times(n uint64) *mChatServiceMockChange {
	if n == 0 {
		mmChange.mock.t.Fatalf("Times of ChatServiceMock.Change mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmChange.expectedInvocations, n)
	return mmChange
}

func (mmChange *mChatServiceMockChange) invocationsDone() bool {
	if len(mmChange.expectations) == 0 && mmChange.defaultExpectation == nil && mmChange.mock.funcChange == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmChange.mock.afterChangeCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmChange.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Change implements service.ChatService
func (mmChange *ChatServiceMock) Change(ctx context.Context, id int64, info *model.ChatInfo) (err error) {
	mm_atomic.AddUint64(&mmChange.beforeChangeCounter, 1)
	defer mm_atomic.AddUint64(&mmChange.afterChangeCounter, 1)

	if mmChange.inspectFuncChange != nil {
		mmChange.inspectFuncChange(ctx, id, info)
	}

	mm_params := ChatServiceMockChangeParams{ctx, id, info}

	// Record call args
	mmChange.ChangeMock.mutex.Lock()
	mmChange.ChangeMock.callArgs = append(mmChange.ChangeMock.callArgs, &mm_params)
	mmChange.ChangeMock.mutex.Unlock()

	for _, e := range mmChange.ChangeMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmChange.ChangeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChange.ChangeMock.defaultExpectation.Counter, 1)
		mm_want := mmChange.ChangeMock.defaultExpectation.params
		mm_want_ptrs := mmChange.ChangeMock.defaultExpectation.paramPtrs

		mm_got := ChatServiceMockChangeParams{ctx, id, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmChange.t.Errorf("ChatServiceMock.Change got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmChange.t.Errorf("ChatServiceMock.Change got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmChange.t.Errorf("ChatServiceMock.Change got unexpected parameter info, want: %#v, got: %#v%s\n", *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmChange.t.Errorf("ChatServiceMock.Change got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmChange.ChangeMock.defaultExpectation.results
		if mm_results == nil {
			mmChange.t.Fatal("No results are set for the ChatServiceMock.Change")
		}
		return (*mm_results).err
	}
	if mmChange.funcChange != nil {
		return mmChange.funcChange(ctx, id, info)
	}
	mmChange.t.Fatalf("Unexpected call to ChatServiceMock.Change. %v %v %v", ctx, id, info)
	return
}

// ChangeAfterCounter returns a count of finished ChatServiceMock.Change invocations
func (mmChange *ChatServiceMock) ChangeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChange.afterChangeCounter)
}

// ChangeBeforeCounter returns a count of ChatServiceMock.Change invocations
func (mmChange *ChatServiceMock) ChangeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChange.beforeChangeCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Change.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChange *mChatServiceMockChange) Calls() []*ChatServiceMockChangeParams {
	mmChange.mutex.RLock()

	argCopy := make([]*ChatServiceMockChangeParams, len(mmChange.callArgs))
	copy(argCopy, mmChange.callArgs)

	mmChange.mutex.RUnlock()

	return argCopy
}

// MinimockChangeDone returns true if the count of the Change invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockChangeDone() bool {
	if m.ChangeMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ChangeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ChangeMock.invocationsDone()
}

// MinimockChangeInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockChangeInspect() {
	for _, e := range m.ChangeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Change with params: %#v", *e.params)
		}
	}

	afterChangeCounter := mm_atomic.LoadUint64(&m.afterChangeCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ChangeMock.defaultExpectation != nil && afterChangeCounter < 1 {
		if m.ChangeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Change")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Change with params: %#v", *m.ChangeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChange != nil && afterChangeCounter < 1 {
		m.t.Error("Expected call to ChatServiceMock.Change")
	}

	if !m.ChangeMock.invocationsDone() && afterChangeCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatServiceMock.Change but found %d calls",
			mm_atomic.LoadUint64(&m.ChangeMock.expectedInvocations), afterChangeCounter)
	}
}

type mChatServiceMockCreateSend struct {
	optional           bool
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockCreateSendExpectation
	expectations       []*ChatServiceMockCreateSendExpectation

	callArgs []*ChatServiceMockCreateSendParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatServiceMockCreateSendExpectation specifies expectation struct of the ChatService.CreateSend
type ChatServiceMockCreateSendExpectation struct {
	mock      *ChatServiceMock
	params    *ChatServiceMockCreateSendParams
	paramPtrs *ChatServiceMockCreateSendParamPtrs
	results   *ChatServiceMockCreateSendResults
	Counter   uint64
}

// ChatServiceMockCreateSendParams contains parameters of the ChatService.CreateSend
type ChatServiceMockCreateSendParams struct {
	ctx  context.Context
	info *model.ChatInfo
}

// ChatServiceMockCreateSendParamPtrs contains pointers to parameters of the ChatService.CreateSend
type ChatServiceMockCreateSendParamPtrs struct {
	ctx  *context.Context
	info **model.ChatInfo
}

// ChatServiceMockCreateSendResults contains results of the ChatService.CreateSend
type ChatServiceMockCreateSendResults struct {
	i1  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateSend *mChatServiceMockCreateSend) Optional() *mChatServiceMockCreateSend {
	mmCreateSend.optional = true
	return mmCreateSend
}

// Expect sets up expected params for ChatService.CreateSend
func (mmCreateSend *mChatServiceMockCreateSend) Expect(ctx context.Context, info *model.ChatInfo) *mChatServiceMockCreateSend {
	if mmCreateSend.mock.funcCreateSend != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Set")
	}

	if mmCreateSend.defaultExpectation == nil {
		mmCreateSend.defaultExpectation = &ChatServiceMockCreateSendExpectation{}
	}

	if mmCreateSend.defaultExpectation.paramPtrs != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by ExpectParams functions")
	}

	mmCreateSend.defaultExpectation.params = &ChatServiceMockCreateSendParams{ctx, info}
	for _, e := range mmCreateSend.expectations {
		if minimock.Equal(e.params, mmCreateSend.defaultExpectation.params) {
			mmCreateSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateSend.defaultExpectation.params)
		}
	}

	return mmCreateSend
}

// ExpectCtxParam1 sets up expected param ctx for ChatService.CreateSend
func (mmCreateSend *mChatServiceMockCreateSend) ExpectCtxParam1(ctx context.Context) *mChatServiceMockCreateSend {
	if mmCreateSend.mock.funcCreateSend != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Set")
	}

	if mmCreateSend.defaultExpectation == nil {
		mmCreateSend.defaultExpectation = &ChatServiceMockCreateSendExpectation{}
	}

	if mmCreateSend.defaultExpectation.params != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Expect")
	}

	if mmCreateSend.defaultExpectation.paramPtrs == nil {
		mmCreateSend.defaultExpectation.paramPtrs = &ChatServiceMockCreateSendParamPtrs{}
	}
	mmCreateSend.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateSend
}

// ExpectInfoParam2 sets up expected param info for ChatService.CreateSend
func (mmCreateSend *mChatServiceMockCreateSend) ExpectInfoParam2(info *model.ChatInfo) *mChatServiceMockCreateSend {
	if mmCreateSend.mock.funcCreateSend != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Set")
	}

	if mmCreateSend.defaultExpectation == nil {
		mmCreateSend.defaultExpectation = &ChatServiceMockCreateSendExpectation{}
	}

	if mmCreateSend.defaultExpectation.params != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Expect")
	}

	if mmCreateSend.defaultExpectation.paramPtrs == nil {
		mmCreateSend.defaultExpectation.paramPtrs = &ChatServiceMockCreateSendParamPtrs{}
	}
	mmCreateSend.defaultExpectation.paramPtrs.info = &info

	return mmCreateSend
}

// Inspect accepts an inspector function that has same arguments as the ChatService.CreateSend
func (mmCreateSend *mChatServiceMockCreateSend) Inspect(f func(ctx context.Context, info *model.ChatInfo)) *mChatServiceMockCreateSend {
	if mmCreateSend.mock.inspectFuncCreateSend != nil {
		mmCreateSend.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.CreateSend")
	}

	mmCreateSend.mock.inspectFuncCreateSend = f

	return mmCreateSend
}

// Return sets up results that will be returned by ChatService.CreateSend
func (mmCreateSend *mChatServiceMockCreateSend) Return(i1 int64, err error) *ChatServiceMock {
	if mmCreateSend.mock.funcCreateSend != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Set")
	}

	if mmCreateSend.defaultExpectation == nil {
		mmCreateSend.defaultExpectation = &ChatServiceMockCreateSendExpectation{mock: mmCreateSend.mock}
	}
	mmCreateSend.defaultExpectation.results = &ChatServiceMockCreateSendResults{i1, err}
	return mmCreateSend.mock
}

// Set uses given function f to mock the ChatService.CreateSend method
func (mmCreateSend *mChatServiceMockCreateSend) Set(f func(ctx context.Context, info *model.ChatInfo) (i1 int64, err error)) *ChatServiceMock {
	if mmCreateSend.defaultExpectation != nil {
		mmCreateSend.mock.t.Fatalf("Default expectation is already set for the ChatService.CreateSend method")
	}

	if len(mmCreateSend.expectations) > 0 {
		mmCreateSend.mock.t.Fatalf("Some expectations are already set for the ChatService.CreateSend method")
	}

	mmCreateSend.mock.funcCreateSend = f
	return mmCreateSend.mock
}

// When sets expectation for the ChatService.CreateSend which will trigger the result defined by the following
// Then helper
func (mmCreateSend *mChatServiceMockCreateSend) When(ctx context.Context, info *model.ChatInfo) *ChatServiceMockCreateSendExpectation {
	if mmCreateSend.mock.funcCreateSend != nil {
		mmCreateSend.mock.t.Fatalf("ChatServiceMock.CreateSend mock is already set by Set")
	}

	expectation := &ChatServiceMockCreateSendExpectation{
		mock:   mmCreateSend.mock,
		params: &ChatServiceMockCreateSendParams{ctx, info},
	}
	mmCreateSend.expectations = append(mmCreateSend.expectations, expectation)
	return expectation
}

// Then sets up ChatService.CreateSend return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockCreateSendExpectation) Then(i1 int64, err error) *ChatServiceMock {
	e.results = &ChatServiceMockCreateSendResults{i1, err}
	return e.mock
}

// Times sets number of times ChatService.CreateSend should be invoked
func (mmCreateSend *mChatServiceMockCreateSend) Times(n uint64) *mChatServiceMockCreateSend {
	if n == 0 {
		mmCreateSend.mock.t.Fatalf("Times of ChatServiceMock.CreateSend mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateSend.expectedInvocations, n)
	return mmCreateSend
}

func (mmCreateSend *mChatServiceMockCreateSend) invocationsDone() bool {
	if len(mmCreateSend.expectations) == 0 && mmCreateSend.defaultExpectation == nil && mmCreateSend.mock.funcCreateSend == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateSend.mock.afterCreateSendCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateSend.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateSend implements service.ChatService
func (mmCreateSend *ChatServiceMock) CreateSend(ctx context.Context, info *model.ChatInfo) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateSend.beforeCreateSendCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateSend.afterCreateSendCounter, 1)

	if mmCreateSend.inspectFuncCreateSend != nil {
		mmCreateSend.inspectFuncCreateSend(ctx, info)
	}

	mm_params := ChatServiceMockCreateSendParams{ctx, info}

	// Record call args
	mmCreateSend.CreateSendMock.mutex.Lock()
	mmCreateSend.CreateSendMock.callArgs = append(mmCreateSend.CreateSendMock.callArgs, &mm_params)
	mmCreateSend.CreateSendMock.mutex.Unlock()

	for _, e := range mmCreateSend.CreateSendMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateSend.CreateSendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateSend.CreateSendMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateSend.CreateSendMock.defaultExpectation.params
		mm_want_ptrs := mmCreateSend.CreateSendMock.defaultExpectation.paramPtrs

		mm_got := ChatServiceMockCreateSendParams{ctx, info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateSend.t.Errorf("ChatServiceMock.CreateSend got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmCreateSend.t.Errorf("ChatServiceMock.CreateSend got unexpected parameter info, want: %#v, got: %#v%s\n", *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateSend.t.Errorf("ChatServiceMock.CreateSend got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateSend.CreateSendMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateSend.t.Fatal("No results are set for the ChatServiceMock.CreateSend")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateSend.funcCreateSend != nil {
		return mmCreateSend.funcCreateSend(ctx, info)
	}
	mmCreateSend.t.Fatalf("Unexpected call to ChatServiceMock.CreateSend. %v %v", ctx, info)
	return
}

// CreateSendAfterCounter returns a count of finished ChatServiceMock.CreateSend invocations
func (mmCreateSend *ChatServiceMock) CreateSendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSend.afterCreateSendCounter)
}

// CreateSendBeforeCounter returns a count of ChatServiceMock.CreateSend invocations
func (mmCreateSend *ChatServiceMock) CreateSendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateSend.beforeCreateSendCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.CreateSend.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateSend *mChatServiceMockCreateSend) Calls() []*ChatServiceMockCreateSendParams {
	mmCreateSend.mutex.RLock()

	argCopy := make([]*ChatServiceMockCreateSendParams, len(mmCreateSend.callArgs))
	copy(argCopy, mmCreateSend.callArgs)

	mmCreateSend.mutex.RUnlock()

	return argCopy
}

// MinimockCreateSendDone returns true if the count of the CreateSend invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockCreateSendDone() bool {
	if m.CreateSendMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateSendMock.invocationsDone()
}

// MinimockCreateSendInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockCreateSendInspect() {
	for _, e := range m.CreateSendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.CreateSend with params: %#v", *e.params)
		}
	}

	afterCreateSendCounter := mm_atomic.LoadUint64(&m.afterCreateSendCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateSendMock.defaultExpectation != nil && afterCreateSendCounter < 1 {
		if m.CreateSendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.CreateSend")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.CreateSend with params: %#v", *m.CreateSendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateSend != nil && afterCreateSendCounter < 1 {
		m.t.Error("Expected call to ChatServiceMock.CreateSend")
	}

	if !m.CreateSendMock.invocationsDone() && afterCreateSendCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatServiceMock.CreateSend but found %d calls",
			mm_atomic.LoadUint64(&m.CreateSendMock.expectedInvocations), afterCreateSendCounter)
	}
}

type mChatServiceMockDelete struct {
	optional           bool
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockDeleteExpectation
	expectations       []*ChatServiceMockDeleteExpectation

	callArgs []*ChatServiceMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatServiceMockDeleteExpectation specifies expectation struct of the ChatService.Delete
type ChatServiceMockDeleteExpectation struct {
	mock      *ChatServiceMock
	params    *ChatServiceMockDeleteParams
	paramPtrs *ChatServiceMockDeleteParamPtrs
	results   *ChatServiceMockDeleteResults
	Counter   uint64
}

// ChatServiceMockDeleteParams contains parameters of the ChatService.Delete
type ChatServiceMockDeleteParams struct {
	ctx context.Context
	id  int64
}

// ChatServiceMockDeleteParamPtrs contains pointers to parameters of the ChatService.Delete
type ChatServiceMockDeleteParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// ChatServiceMockDeleteResults contains results of the ChatService.Delete
type ChatServiceMockDeleteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mChatServiceMockDelete) Optional() *mChatServiceMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for ChatService.Delete
func (mmDelete *mChatServiceMockDelete) Expect(ctx context.Context, id int64) *mChatServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &ChatServiceMockDeleteParams{ctx, id}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for ChatService.Delete
func (mmDelete *mChatServiceMockDelete) ExpectCtxParam1(ctx context.Context) *mChatServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDelete
}

// ExpectIdParam2 sets up expected param id for ChatService.Delete
func (mmDelete *mChatServiceMockDelete) ExpectIdParam2(id int64) *mChatServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &ChatServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.id = &id

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Delete
func (mmDelete *mChatServiceMockDelete) Inspect(f func(ctx context.Context, id int64)) *mChatServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by ChatService.Delete
func (mmDelete *mChatServiceMockDelete) Return(err error) *ChatServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &ChatServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &ChatServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the ChatService.Delete method
func (mmDelete *mChatServiceMockDelete) Set(f func(ctx context.Context, id int64) (err error)) *ChatServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the ChatService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the ChatService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the ChatService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mChatServiceMockDelete) When(ctx context.Context, id int64) *ChatServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("ChatServiceMock.Delete mock is already set by Set")
	}

	expectation := &ChatServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &ChatServiceMockDeleteParams{ctx, id},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Delete return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockDeleteExpectation) Then(err error) *ChatServiceMock {
	e.results = &ChatServiceMockDeleteResults{err}
	return e.mock
}

// Times sets number of times ChatService.Delete should be invoked
func (mmDelete *mChatServiceMockDelete) Times(n uint64) *mChatServiceMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of ChatServiceMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	return mmDelete
}

func (mmDelete *mChatServiceMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements service.ChatService
func (mmDelete *ChatServiceMock) Delete(ctx context.Context, id int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, id)
	}

	mm_params := ChatServiceMockDeleteParams{ctx, id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := ChatServiceMockDeleteParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("ChatServiceMock.Delete got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDelete.t.Errorf("ChatServiceMock.Delete got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("ChatServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the ChatServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, id)
	}
	mmDelete.t.Fatalf("Unexpected call to ChatServiceMock.Delete. %v %v", ctx, id)
	return
}

// DeleteAfterCounter returns a count of finished ChatServiceMock.Delete invocations
func (mmDelete *ChatServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of ChatServiceMock.Delete invocations
func (mmDelete *ChatServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mChatServiceMockDelete) Calls() []*ChatServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*ChatServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Delete with params: %#v", *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Error("Expected call to ChatServiceMock.Delete")
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatServiceMock.Delete but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), afterDeleteCounter)
	}
}

type mChatServiceMockGet struct {
	optional           bool
	mock               *ChatServiceMock
	defaultExpectation *ChatServiceMockGetExpectation
	expectations       []*ChatServiceMockGetExpectation

	callArgs []*ChatServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ChatServiceMockGetExpectation specifies expectation struct of the ChatService.Get
type ChatServiceMockGetExpectation struct {
	mock      *ChatServiceMock
	params    *ChatServiceMockGetParams
	paramPtrs *ChatServiceMockGetParamPtrs
	results   *ChatServiceMockGetResults
	Counter   uint64
}

// ChatServiceMockGetParams contains parameters of the ChatService.Get
type ChatServiceMockGetParams struct {
	ctx context.Context
	id  int64
}

// ChatServiceMockGetParamPtrs contains pointers to parameters of the ChatService.Get
type ChatServiceMockGetParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// ChatServiceMockGetResults contains results of the ChatService.Get
type ChatServiceMockGetResults struct {
	cp1 *model.Chat
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mChatServiceMockGet) Optional() *mChatServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for ChatService.Get
func (mmGet *mChatServiceMockGet) Expect(ctx context.Context, id int64) *mChatServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &ChatServiceMockGetParams{ctx, id}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for ChatService.Get
func (mmGet *mChatServiceMockGet) ExpectCtxParam1(ctx context.Context) *mChatServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ChatServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectIdParam2 sets up expected param id for ChatService.Get
func (mmGet *mChatServiceMockGet) ExpectIdParam2(id int64) *mChatServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &ChatServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the ChatService.Get
func (mmGet *mChatServiceMockGet) Inspect(f func(ctx context.Context, id int64)) *mChatServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for ChatServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by ChatService.Get
func (mmGet *mChatServiceMockGet) Return(cp1 *model.Chat, err error) *ChatServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &ChatServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &ChatServiceMockGetResults{cp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the ChatService.Get method
func (mmGet *mChatServiceMockGet) Set(f func(ctx context.Context, id int64) (cp1 *model.Chat, err error)) *ChatServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the ChatService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the ChatService.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the ChatService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mChatServiceMockGet) When(ctx context.Context, id int64) *ChatServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("ChatServiceMock.Get mock is already set by Set")
	}

	expectation := &ChatServiceMockGetExpectation{
		mock:   mmGet.mock,
		params: &ChatServiceMockGetParams{ctx, id},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up ChatService.Get return parameters for the expectation previously defined by the When method
func (e *ChatServiceMockGetExpectation) Then(cp1 *model.Chat, err error) *ChatServiceMock {
	e.results = &ChatServiceMockGetResults{cp1, err}
	return e.mock
}

// Times sets number of times ChatService.Get should be invoked
func (mmGet *mChatServiceMockGet) Times(n uint64) *mChatServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of ChatServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mChatServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements service.ChatService
func (mmGet *ChatServiceMock) Get(ctx context.Context, id int64) (cp1 *model.Chat, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, id)
	}

	mm_params := ChatServiceMockGetParams{ctx, id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := ChatServiceMockGetParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("ChatServiceMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("ChatServiceMock.Get got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("ChatServiceMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the ChatServiceMock.Get")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, id)
	}
	mmGet.t.Fatalf("Unexpected call to ChatServiceMock.Get. %v %v", ctx, id)
	return
}

// GetAfterCounter returns a count of finished ChatServiceMock.Get invocations
func (mmGet *ChatServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of ChatServiceMock.Get invocations
func (mmGet *ChatServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to ChatServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mChatServiceMockGet) Calls() []*ChatServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*ChatServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *ChatServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *ChatServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatServiceMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ChatServiceMock.Get")
		} else {
			m.t.Errorf("Expected call to ChatServiceMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to ChatServiceMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatServiceMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockChangeInspect()

			m.MinimockCreateSendInspect()

			m.MinimockDeleteInspect()

			m.MinimockGetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChangeDone() &&
		m.MinimockCreateSendDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone()
}
